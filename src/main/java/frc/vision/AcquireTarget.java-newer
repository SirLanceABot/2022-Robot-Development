package frc.robot;

import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.cscore.UsbCamera;
import edu.wpi.first.cscore.VideoSource.ConnectionStrategy;
import edu.wpi.first.cscore.CvSink;
import edu.wpi.first.cscore.CvSource;

import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.opencv.core.Core;

public class AcquireTarget  implements Runnable
{
  // minimal acquire, add a rectangle to one, and display both streams adds about 8% cpu utilization
  // these are named streams 
  // Tell the CameraServer to send to the dashboard for debugging
  // Doubt camera will be streamed to humans during a match but if ti is
  // be sure to reduce the resolution

  static
  {
    System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
  }

  // set these 2 displays to false for match play to save Ethernet bandwidth
  // Probably put in config parameters such Constants class or SmartDashboard inputs
  boolean displayTargetCamera = true;
  boolean displayTargetContours = true;

	// This object is used to send the OpenCV processed image to the Dashboard if desired
	private CvSource outputStream;

	// This object is used to capture frames from the camera. The captured image is stored to a Mat
	private CvSink inputStream;

  public void run() {
    // The Registered Trademark looks right in VSC but it isn't "/dev/v4l/by-id/usb-Microsoft_MicrosoftÂ®_LifeCam_HD-3000-video-index0"
    UsbCamera TargetCamera = new UsbCamera("TargetCamera", "/dev/v4l/by-id/usb-Microsoft_Microsoft\u00AE_LifeCam_HD-3000-video-index0");
    TargetCamera.setConnectionStrategy(ConnectionStrategy.kKeepOpen);
    TargetCamera.setResolution(352, 288); // 10fps ok
    TargetCamera.setFPS(10);
    TargetCamera.setExposureManual(0);
 
    // Tell the CameraServer to send to the dashboard for debugging
    if(displayTargetCamera)
    {
      CameraServer.startAutomaticCapture(TargetCamera);
    }

    if(displayTargetContours)
    {
      outputStream = CameraServer.putVideo("TargetContours", 352, 288);
      outputStream.setFPS(7);
    }
 
    // Get a CvSink. This will capture Mats from the camera
    inputStream = new CvSink("TargetCvSink");
    inputStream.setSource(TargetCamera);

    // Mats are very memory expensive. Lets reuse this Mat.
    Mat mat = new Mat();

    // loop to grab camera image into a Mat, process the Mat, put an image to be viewed if desired

    // This cannot be 'true'. The program will never exit if it is. This lets
    // the robot stop this thread when restarting robot code or deploying.
    while (!Thread.interrupted())
    {
      // Tell the CvSink to grab a frame from the camera and put it
      // in the source mat.  If there is an error notify the output.
      if (inputStream.grabFrame(mat, 1.0) == 0) { // 1.0 second timeout; sometimes the 2nd acquire took longer then ok forever
        // Send the output the error
        System.out.println("intake camera error " + inputStream.getError());//intake camera error timed out getting frame
        // skip the rest of the current iteration
        continue;
      }

      /* YOUR IMAGE PROCESSING GOES HERE */
      // find the target
      // compute the angle to turn to align and the distance
      // send 4 pieces of data to whatever is driving this beast
      // angle to turn, distance to target, frame sequence number, time of acquisition

      // Demo OpenCV draw a rectangle on the image
      Imgproc.rectangle(mat, new Point(10, 10), new Point(100, 100), new Scalar(255, 255, 255), 5);

      if(displayTargetContours)
      {
        outputStream.putFrame(mat); // Give the output stream a new image to display
      }

    }
  }
}
    
/* pscp  -v lvuser@roborio-4237-frc.local:/home/lvuser/camerid.txt  c:\\users\\rkt\\cameraid.txt*/
//MjpegServer server = CameraServer.startAutomaticCapture(TargetCamera); // save the server to enable changing quality, etc.
//System.out.println("targetcamera" + TargetCamera.getConfigJson());

// ["640x480 YUYV 30 fps","640x480 YUYV 20 fps","640x480 YUYV 15 fps","640x480 YUYV 10 fps","640x480 YUYV 7 fps","1280x720 YUYV 10 fps","1280x720 YUYV 7 fps","960x544 YUYV 15 fps","960x544 YUYV 10 fps","960x544 YUYV 7 fps","800x448 YUYV 20 fps","800x448 YUYV 15 fps","800x448 YUYV 10 fps","800x448 YUYV 7 fps","640x360 YUYV 30 fps","640x360 YUYV 20 fps","640x360 YUYV 15 fps","640x360 YUYV 10 fps","640x360 YUYV 7 fps","424x240 YUYV 30 fps","424x240 YUYV 20 fps","424x240 YUYV 15 fps","424x240 YUYV 10 fps","424x240 YUYV 7 fps","352x288 YUYV 30 fps","352x288 YUYV 20 fps","352x288 YUYV 15 fps","352x288 YUYV 10 fps","352x288 YUYV 7 fps","320x240 YUYV 30 fps","320x240 YUYV 20 fps","320x240 YUYV 15 fps","320x240 YUYV 10 fps","320x240 YUYV 7 fps","800x600 YUYV 15 fps","800x600 YUYV 10 fps","800x600 YUYV 7 fps","176x144 YUYV 30 fps","176x144 YUYV 20 fps","176x144 YUYV 15 fps","176x144 YUYV 10 fps","176x144 YUYV 7 fps","160x120 YUYV 30 fps","160x120 YUYV 20 fps","160x120 YUYV 15 fps","160x120 YUYV 10 fps","160x120 YUYV 7 fps","1280x800 YUYV 10 fps",
// "640x480 MJPEG 30 fps","640x480 MJPEG 20 fps","640x480 MJPEG 15 fps","640x480 MJPEG 10 fps","640x480 MJPEG 7 fps","1280x720 MJPEG 30 fps","1280x720 MJPEG 20 fps","1280x720 MJPEG 15 fps","1280x720 MJPEG 10 fps","1280x720 MJPEG 7 fps","960x544 MJPEG 30 fps","960x544 MJPEG 20 fps","960x544 MJPEG 15 fps","960x544 MJPEG 10 fps","960x544 MJPEG 7 fps","800x448 MJPEG 30 fps","800x448 MJPEG 20 fps","800x448 MJPEG 15 fps","800x448 MJPEG 10 fps","800x448 MJPEG 7 fps","640x360 MJPEG 30 fps","640x360 MJPEG 20 fps","640x360 MJPEG 15 fps","640x360 MJPEG 10 fps","640x360 MJPEG 7 fps","800x600 MJPEG 30 fps","800x600 MJPEG 20 fps","800x600 MJPEG 15 fps","800x600 MJPEG 10 fps","800x600 MJPEG 7 fps",
// "416x240 MJPEG 30 fps","416x240 MJPEG 20 fps","416x240 MJPEG 15 fps","416x240 MJPEG 10 fps","416x240 MJPEG 7 fps",
// "352x288 MJPEG 30 fps","352x288 MJPEG 20 fps","352x288 MJPEG 15 fps","352x288 MJPEG 10 fps","352x288 MJPEG 7 fps",
// "176x144 MJPEG 30 fps","176x144 MJPEG 20 fps","176x144 MJPEG 15 fps","176x144 MJPEG 10 fps","176x144 MJPEG 7 fps",
// "320x240 MJPEG 30 fps","320x240 MJPEG 20 fps","320x240 MJPEG 15 fps","320x240 MJPEG 10 fps","320x240 MJPEG 7 fps","160x120 MJPEG 30 fps","160x120 MJPEG 20 fps","160x120 MJPEG 15 fps","160x120 MJPEG 10 fps","160x120 MJPEG 7 fps"]